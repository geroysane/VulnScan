#ifndef SSLTLSCHECKER_H
#define SSLTLSCHECKER_H

#include <QObject>
#include <QString>
#include <QVector>
#include <QTimer>
#include <QSslSocket>
#include <QSslCertificate>
#include <QSslConfiguration>
#include <QSslCipher>
#include "../scanner/Vulnerability.h"

/**
 * @struct SslTlsResult
 * @brief Result of SSL/TLS security analysis
 */
struct SslTlsResult {
    QString host;                           ///< Target host
    int port;                               ///< Target port
    bool sslSupported;                      ///< Whether SSL/TLS is supported
    QString protocol;                       ///< Protocol version (TLS 1.2, TLS 1.3, etc.)
    QVector<QString> supportedProtocols;    ///< All supported protocol versions
    QVector<QSslCipher> ciphers;            ///< Negotiated cipher suites
    QSslCertificate certificate;            ///< Server certificate
    QVector<QSslCertificate> certificateChain; ///< Certificate chain
    bool certificateValid;                  ///< Whether certificate is valid
    QString certificateError;               ///< Certificate validation error
    QVector<Vulnerability> vulnerabilities; ///< Detected vulnerabilities

    SslTlsResult() : port(0), sslSupported(false), certificateValid(false) {}
};

Q_DECLARE_METATYPE(SslTlsResult)

/**
 * @class SslTlsChecker
 * @brief SSL/TLS security configuration analyzer
 *
 * Performs comprehensive SSL/TLS security analysis including:
 * - Protocol version detection (SSLv2, SSLv3, TLS 1.0, 1.1, 1.2, 1.3)
 * - Cipher suite analysis (weak/strong ciphers)
 * - Certificate validation (expiry, chain, self-signed)
 * - Common SSL/TLS vulnerabilities detection
 *
 * Usage:
 * @code
 * SslTlsChecker checker;
 *
 * connect(&checker, &SslTlsChecker::finished, [](const SslTlsResult& result) {
 *     qDebug() << "SSL/TLS analysis complete for" << result.host;
 *     qDebug() << "Vulnerabilities found:" << result.vulnerabilities.size();
 * });
 *
 * checker.checkHost("example.com", 443);
 * @endcode
 */
class SslTlsChecker : public QObject {
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit SslTlsChecker(QObject* parent = nullptr);

    /**
     * @brief Destructor
     */
    ~SslTlsChecker();

    /**
     * @brief Start SSL/TLS security analysis for a host
     * @param host Target hostname or IP address
     * @param port Target port (default: 443 for HTTPS)
     * @param timeout Connection timeout in milliseconds (default: 10000)
     *
     * Initiates asynchronous SSL/TLS handshake and analysis.
     * Emits finished() signal when complete.
     */
    void checkHost(const QString& host, int port = 443, int timeout = 10000);

    /**
     * @brief Cancel ongoing SSL/TLS check
     */
    void cancel();

    /**
     * @brief Check if analysis is currently running
     * @return true if checking
     */
    bool isChecking() const;

    /**
     * @brief Get last analysis result
     * @return SslTlsResult from last check
     */
    SslTlsResult getLastResult() const;

signals:
    /**
     * @brief Analysis completed signal
     * @param result SSL/TLS analysis result
     */
    void finished(const SslTlsResult& result);

    /**
     * @brief Error occurred during analysis
     * @param error Error description
     */
    void error(const QString& error);

    /**
     * @brief Vulnerability detected signal
     * @param vulnerability Detected vulnerability
     */
    void vulnerabilityDetected(const Vulnerability& vulnerability);

private slots:
    /**
     * @brief Handle SSL socket connected
     */
    void onConnected();

    /**
     * @brief Handle SSL socket encrypted (handshake complete)
     */
    void onEncrypted();

    /**
     * @brief Handle SSL errors
     * @param errors List of SSL errors
     */
    void onSslErrors(const QList<QSslError>& errors);

    /**
     * @brief Handle socket errors
     * @param error Socket error
     */
    void onSocketError(QAbstractSocket::SocketError error);

    /**
     * @brief Handle connection timeout
     */
    void onTimeout();

private:
    /**
     * @brief Analyze SSL/TLS protocol version
     */
    void analyzeProtocol();

    /**
     * @brief Analyze cipher suites
     */
    void analyzeCiphers();

    /**
     * @brief Analyze certificate
     */
    void analyzeCertificate();

    /**
     * @brief Detect weak ciphers
     * @param cipher Cipher to check
     * @return true if cipher is weak
     */
    bool isWeakCipher(const QSslCipher& cipher) const;

    /**
     * @brief Check if protocol is deprecated
     * @param protocol Protocol to check
     * @return true if protocol is deprecated/insecure
     */
    bool isDeprecatedProtocol(QSsl::SslProtocol protocol) const;

    /**
     * @brief Finalize analysis and emit result
     */
    void finalizeAnalysis();

    /**
     * @brief Cleanup resources
     */
    void cleanup();

    QSslSocket* m_socket;           ///< SSL socket for connection
    QTimer* m_timer;                ///< Timeout timer
    SslTlsResult m_result;          ///< Current analysis result
    bool m_isChecking;              ///< Checking status flag
    QString m_targetHost;           ///< Target host being checked
    int m_targetPort;               ///< Target port being checked
};

#endif // SSLTLSCHECKER_H
