#ifndef HTTPVULNCHECKER_H
#define HTTPVULNCHECKER_H

#include "ServiceVulnChecker.h"
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QEventLoop>
#include <QSet>

/**
 * @class HttpVulnChecker
 * @brief HTTP/HTTPS service vulnerability checker
 *
 * Detects common web server and application vulnerabilities:
 * - Missing security headers (HSTS, CSP, X-Frame-Options, etc.)
 * - Dangerous HTTP methods (TRACE, PUT, DELETE)
 * - Common vulnerable paths (/.git, /admin, /.env)
 * - Server information disclosure
 * - Outdated server versions with known CVEs
 */
class HttpVulnChecker : public ServiceVulnChecker
{
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit HttpVulnChecker(QObject *parent = nullptr);

    /**
     * @brief Destructor
     */
    ~HttpVulnChecker() override;

    /**
     * @brief Check if this checker handles HTTP/HTTPS services
     * @param serviceName Service name to check
     * @return true if service is HTTP/HTTPS
     */
    bool canHandle(const QString &serviceName) const override;

    /**
     * @brief Perform HTTP vulnerability checks
     * @param host Target host address
     * @param port Port result containing service information
     * @return List of detected vulnerabilities
     */
    QList<Vulnerability> checkVulnerabilities(const QString &host, const PortResult &port) override;

    /**
     * @brief Get checker name
     * @return "HTTP Vulnerability Checker"
     */
    QString name() const override;

    /**
     * @brief Get checker description
     * @return Description of HTTP checks performed
     */
    QString description() const override;

private:
    /**
     * @brief Check for missing security headers
     * @param url Target URL
     * @param serviceName Service name and version
     * @return List of header-related vulnerabilities
     */
    QList<Vulnerability> checkSecurityHeaders(const QString &url, const QString &serviceName);

    /**
     * @brief Check for dangerous HTTP methods
     * @param url Target URL
     * @param serviceName Service name and version
     * @return List of method-related vulnerabilities
     */
    QList<Vulnerability> checkDangerousMethods(const QString &url, const QString &serviceName);

    /**
     * @brief Check for common vulnerable paths
     * @param url Base URL
     * @param serviceName Service name and version
     * @return List of path-related vulnerabilities
     */
    QList<Vulnerability> checkCommonPaths(const QString &url, const QString &serviceName);

    /**
     * @brief Check for server information disclosure
     * @param url Target URL
     * @param serviceName Service name and version
     * @return List of information disclosure vulnerabilities
     */
    QList<Vulnerability> checkInformationDisclosure(const QString &url, const QString &serviceName);

    /**
     * @brief Perform HTTP request and get reply
     * @param url Target URL
     * @param method HTTP method (GET, HEAD, OPTIONS, etc.)
     * @return Network reply (caller takes ownership)
     */
    QNetworkReply* performRequest(const QString &url, const QString &method = "GET");

    /**
     * @brief Check if a header is missing or has weak value
     * @param headers Response headers
     * @param headerName Header name to check
     * @param requiredValue Optional required value
     * @return true if header is missing or weak
     */
    bool isMissingOrWeak(const QNetworkReply *reply, const QString &headerName, const QString &requiredValue = QString()) const;

    QNetworkAccessManager *m_networkManager; ///< Network access manager
};

#endif // HTTPVULNCHECKER_H
