#ifndef FTPVULNCHECKER_H
#define FTPVULNCHECKER_H

#include "ServiceVulnChecker.h"
#include <QTcpSocket>

/**
 * @class FtpVulnChecker
 * @brief FTP service vulnerability checker
 *
 * Detects FTP security issues:
 * - Anonymous login allowed
 * - FTP bounce vulnerability (PORT command)
 * - Plain-text authentication (no FTPS/SFTP)
 * - Outdated FTP server versions
 * - Banner disclosure (version information)
 * - Weak or default configurations
 */
class FtpVulnChecker : public ServiceVulnChecker
{
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit FtpVulnChecker(QObject *parent = nullptr);

    /**
     * @brief Destructor
     */
    ~FtpVulnChecker() override;

    /**
     * @brief Check if this checker handles FTP services
     * @param serviceName Service name to check
     * @return true if service is FTP
     */
    bool canHandle(const QString &serviceName) const override;

    /**
     * @brief Perform FTP vulnerability checks
     * @param host Target host address
     * @param port Port result containing service information
     * @return List of detected vulnerabilities
     */
    QList<Vulnerability> checkVulnerabilities(const QString &host, const PortResult &port) override;

    /**
     * @brief Get checker name
     * @return "FTP Vulnerability Checker"
     */
    QString name() const override;

    /**
     * @brief Get checker description
     * @return Description of FTP checks performed
     */
    QString description() const override;

private:
    /**
     * @brief Connect to FTP server and get banner
     * @param host Target host
     * @param port Target port
     * @param banner Output parameter for banner
     * @return true if connection successful
     */
    bool connectAndGetBanner(const QString &host, int port, QString &banner);

    /**
     * @brief Send FTP command and get response
     * @param socket TCP socket connected to FTP server
     * @param command FTP command to send
     * @return Server response
     */
    QString sendCommand(QTcpSocket *socket, const QString &command);

    /**
     * @brief Check if anonymous login is allowed
     * @param host Target host
     * @param port Target port
     * @param serviceName Service name and version
     * @return List of anonymous login vulnerabilities
     */
    QList<Vulnerability> checkAnonymousLogin(const QString &host, int port, const QString &serviceName);

    /**
     * @brief Check for plain-text authentication (no FTPS)
     * @param port Port number
     * @param serviceName Service name and version
     * @return List of plain-text vulnerabilities
     */
    QList<Vulnerability> checkPlainTextAuth(int port, const QString &serviceName);

    /**
     * @brief Check for outdated FTP versions
     * @param banner FTP banner
     * @param serviceName Service name and version
     * @return List of version-related vulnerabilities
     */
    QList<Vulnerability> checkFtpVersion(const QString &banner, const QString &serviceName);

    /**
     * @brief Check for banner disclosure
     * @param banner FTP banner
     * @param serviceName Service name and version
     * @return List of information disclosure vulnerabilities
     */
    QList<Vulnerability> checkBannerDisclosure(const QString &banner, const QString &serviceName);

    /**
     * @brief Check for FTP bounce vulnerability
     * @param host Target host
     * @param port Target port
     * @param serviceName Service name and version
     * @return List of bounce vulnerabilities
     */
    QList<Vulnerability> checkFtpBounce(const QString &host, int port, const QString &serviceName);

    /**
     * @brief Extract FTP version from banner
     * @param banner FTP banner string
     * @return Version string
     */
    QString extractVersion(const QString &banner) const;
};

#endif // FTPVULNCHECKER_H
