#ifndef VULNERABILITYDATABASE_H
#define VULNERABILITYDATABASE_H

#include <QString>
#include <QVector>
#include <QMutex>
#include <QSqlDatabase>
#include <memory>
#include "../scanner/Vulnerability.h"

/**
 * @struct CveEntry
 * @brief Represents a CVE entry in the database
 *
 * Contains comprehensive CVE information including version ranges
 * and metadata for vulnerability matching.
 */
struct CveEntry {
    int id;                          ///< Database primary key
    QString cveId;                   ///< CVE identifier (e.g., "CVE-2021-44228")
    QString description;             ///< Detailed vulnerability description
    QString severity;                ///< Severity level (CRITICAL, HIGH, MEDIUM, LOW)
    float cvssScore;                 ///< CVSS score (0.0 - 10.0)
    QString affectedService;         ///< Service name (e.g., "Apache", "OpenSSH")
    QString affectedVersions;        ///< Version range (e.g., "2.0-2.5", "1.*", "3.2.1")
    QString publishedDate;           ///< Publication date (ISO 8601 format)
    QString references;              ///< URLs and references (comma-separated)
    QString cweId;                   ///< CWE identifier (e.g., "CWE-79")

    CveEntry() : id(0), cvssScore(0.0f) {}
};

Q_DECLARE_METATYPE(CveEntry)

/**
 * @class VulnerabilityDatabase
 * @brief Thread-safe CVE database manager with connection pooling
 *
 * Provides thread-safe access to the CVE database with connection pooling
 * for efficient concurrent queries. Supports CRUD operations and complex
 * queries for vulnerability matching.
 *
 * Features:
 * - Thread-safe database operations with QMutex
 * - Connection pooling for multi-threaded access
 * - CVE CRUD operations (Create, Read, Update, Delete)
 * - Query by CVE ID, service name, and service/version combination
 * - Version range matching support
 *
 * @note All methods are thread-safe and can be called from multiple threads
 */
class VulnerabilityDatabase {
public:
    /**
     * @brief Constructor
     * @param databasePath Path to the SQLite database file
     * @param maxConnections Maximum number of connection pool connections (default: 10)
     */
    explicit VulnerabilityDatabase(const QString& databasePath, int maxConnections = 10);

    /**
     * @brief Destructor - closes all connections
     */
    ~VulnerabilityDatabase();

    /**
     * @brief Initialize the CVE database schema
     * @return true if initialization successful, false otherwise
     *
     * Creates the cve_entries table if it doesn't exist.
     * Thread-safe.
     */
    bool initialize();

    /**
     * @brief Insert a new CVE entry
     * @param entry The CVE entry to insert
     * @return true if insertion successful, false otherwise
     *
     * Thread-safe. The entry.id field will be updated with the new record ID.
     */
    bool insertCve(CveEntry& entry);

    /**
     * @brief Update an existing CVE entry
     * @param entry The CVE entry to update (must have valid id)
     * @return true if update successful, false otherwise
     *
     * Thread-safe.
     */
    bool updateCve(const CveEntry& entry);

    /**
     * @brief Delete a CVE entry by ID
     * @param id The database ID of the entry to delete
     * @return true if deletion successful, false otherwise
     *
     * Thread-safe.
     */
    bool deleteCve(int id);

    /**
     * @brief Find a CVE entry by CVE ID
     * @param cveId The CVE identifier (e.g., "CVE-2021-44228")
     * @param entry Output parameter - will contain the found entry
     * @return true if CVE found, false otherwise
     *
     * Thread-safe.
     */
    bool findByCveId(const QString& cveId, CveEntry& entry) const;

    /**
     * @brief Find all CVE entries for a specific service
     * @param serviceName The service name (e.g., "Apache", "OpenSSH")
     * @return Vector of matching CVE entries
     *
     * Thread-safe. Case-insensitive search.
     */
    QVector<CveEntry> findByService(const QString& serviceName) const;

    /**
     * @brief Find CVE entries matching service and version
     * @param serviceName The service name
     * @param version The version string (e.g., "2.4.1")
     * @return Vector of matching CVE entries
     *
     * Thread-safe. Performs version range matching against affectedVersions field.
     * Supports formats: "2.0-2.5" (range), "1.*" (wildcard), "3.2.1" (exact)
     */
    QVector<CveEntry> findByServiceAndVersion(const QString& serviceName, const QString& version) const;

    /**
     * @brief Get all CVE entries in the database
     * @return Vector of all CVE entries
     *
     * Thread-safe.
     */
    QVector<CveEntry> getAllCves() const;

    /**
     * @brief Get the total number of CVE entries
     * @return Total count of CVEs in database
     *
     * Thread-safe.
     */
    int getCveCount() const;

    /**
     * @brief Clear all CVE entries from the database
     * @return true if successful, false otherwise
     *
     * Thread-safe. USE WITH CAUTION - deletes all data.
     */
    bool clearAllCves();

    /**
     * @brief Check if the database is properly initialized
     * @return true if database is ready, false otherwise
     */
    bool isInitialized() const { return m_initialized; }

    /**
     * @brief Get the last error message
     * @return Description of the last error that occurred
     */
    QString getLastError() const { return m_lastError; }

private:
    /**
     * @brief Get a database connection from the pool
     * @return Database connection name (thread-specific)
     *
     * Thread-safe. Creates a new connection if none exists for this thread.
     */
    QString getConnection() const;

    /**
     * @brief Check if a version matches a version range pattern
     * @param version The version to check (e.g., "2.4.1")
     * @param pattern The pattern to match against (e.g., "2.0-2.5", "1.*", "3.2.1")
     * @return true if version matches pattern, false otherwise
     *
     * Supports:
     * - Range format: "2.0-2.5" (inclusive)
     * - Wildcard format: "1.*" (matches 1.0, 1.1, 1.2.3, etc.)
     * - Exact format: "3.2.1" (exact match)
     */
    bool matchesVersionPattern(const QString& version, const QString& pattern) const;

    /**
     * @brief Compare two version strings
     * @param v1 First version string
     * @param v2 Second version string
     * @return -1 if v1 < v2, 0 if v1 == v2, 1 if v1 > v2
     *
     * Performs semantic version comparison (e.g., 1.2.3 vs 1.10.0)
     */
    int compareVersions(const QString& v1, const QString& v2) const;

    QString m_databasePath;          ///< Path to SQLite database file
    int m_maxConnections;            ///< Maximum pool connections
    mutable QMutex m_mutex;          ///< Mutex for thread safety
    bool m_initialized;              ///< Database initialization status
    mutable QString m_lastError;     ///< Last error message
    mutable int m_connectionCounter; ///< Counter for connection naming
};

#endif // VULNERABILITYDATABASE_H
