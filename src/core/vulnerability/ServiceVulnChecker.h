#ifndef SERVICEVULNCHECKER_H
#define SERVICEVULNCHECKER_H

#include <QObject>
#include <QString>
#include <QList>
#include "core/scanner/Vulnerability.h"
#include "core/scanner/PortResult.h"

/**
 * @class ServiceVulnChecker
 * @brief Abstract base class for service-specific vulnerability checks
 *
 * Provides a plugin architecture for implementing custom vulnerability
 * detection logic for different network services (HTTP, SSH, FTP, etc.).
 *
 * Subclasses should implement checkVulnerabilities() to perform
 * service-specific security assessments.
 */
class ServiceVulnChecker : public QObject
{
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit ServiceVulnChecker(QObject *parent = nullptr);

    /**
     * @brief Virtual destructor
     */
    virtual ~ServiceVulnChecker();

    /**
     * @brief Check if this checker handles the given service
     * @param serviceName Service name to check
     * @return true if this checker can handle the service
     */
    virtual bool canHandle(const QString &serviceName) const = 0;

    /**
     * @brief Perform vulnerability checks on a service
     * @param host Target host address
     * @param port Port result containing service information
     * @return List of detected vulnerabilities
     */
    virtual QList<Vulnerability> checkVulnerabilities(const QString &host, const PortResult &port) = 0;

    /**
     * @brief Get the name of this checker
     * @return Checker name (e.g., "HTTP Vulnerability Checker")
     */
    virtual QString name() const = 0;

    /**
     * @brief Get the description of this checker
     * @return Checker description
     */
    virtual QString description() const = 0;

    /**
     * @brief Set connection timeout for network operations
     * @param timeoutMs Timeout in milliseconds (default: 10000)
     */
    void setTimeout(int timeoutMs);

    /**
     * @brief Get current timeout setting
     * @return Timeout in milliseconds
     */
    int timeout() const;

signals:
    /**
     * @brief Emitted when a vulnerability is detected
     * @param vulnerability Detected vulnerability
     */
    void vulnerabilityDetected(const Vulnerability &vulnerability);

    /**
     * @brief Emitted when checking is complete
     * @param vulnerabilities List of all detected vulnerabilities
     */
    void checkComplete(const QList<Vulnerability> &vulnerabilities);

    /**
     * @brief Emitted when an error occurs
     * @param errorMessage Error description
     */
    void errorOccurred(const QString &errorMessage);

protected:
    /**
     * @brief Create a vulnerability object with common fields filled
     * @param cveId CVE identifier (or custom ID)
     * @param description Vulnerability description
     * @param severity Severity level (Critical, High, Medium, Low)
     * @param cvssScore CVSS score (0.0 - 10.0)
     * @param affectedService Service name and version
     * @param recommendedAction Remediation advice
     * @return Constructed vulnerability object
     */
    Vulnerability createVulnerability(
        const QString &cveId,
        const QString &description,
        const QString &severity,
        float cvssScore,
        const QString &affectedService,
        const QString &recommendedAction
    ) const;

    int m_timeout; ///< Connection timeout in milliseconds
};

#endif // SERVICEVULNCHECKER_H
