#ifndef SSHVULNCHECKER_H
#define SSHVULNCHECKER_H

#include "ServiceVulnChecker.h"
#include <QTcpSocket>
#include <QStringList>

/**
 * @class SshVulnChecker
 * @brief SSH service vulnerability checker
 *
 * Detects SSH security issues:
 * - Outdated SSH versions with known CVEs
 * - Weak key exchange algorithms
 * - Weak encryption ciphers
 * - Weak MAC algorithms
 * - Banner disclosure (version information)
 * - Deprecated protocol versions (SSH-1.x)
 */
class SshVulnChecker : public ServiceVulnChecker
{
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit SshVulnChecker(QObject *parent = nullptr);

    /**
     * @brief Destructor
     */
    ~SshVulnChecker() override;

    /**
     * @brief Check if this checker handles SSH services
     * @param serviceName Service name to check
     * @return true if service is SSH
     */
    bool canHandle(const QString &serviceName) const override;

    /**
     * @brief Perform SSH vulnerability checks
     * @param host Target host address
     * @param port Port result containing service information
     * @return List of detected vulnerabilities
     */
    QList<Vulnerability> checkVulnerabilities(const QString &host, const PortResult &port) override;

    /**
     * @brief Get checker name
     * @return "SSH Vulnerability Checker"
     */
    QString name() const override;

    /**
     * @brief Get checker description
     * @return Description of SSH checks performed
     */
    QString description() const override;

private:
    /**
     * @brief Get SSH banner from server
     * @param host Target host
     * @param port Target port
     * @return SSH banner string
     */
    QString getSshBanner(const QString &host, int port);

    /**
     * @brief Check for outdated SSH versions
     * @param banner SSH banner
     * @param serviceName Service name and version
     * @return List of version-related vulnerabilities
     */
    QList<Vulnerability> checkSshVersion(const QString &banner, const QString &serviceName);

    /**
     * @brief Check for weak key exchange algorithms
     * @param banner SSH banner
     * @param serviceName Service name and version
     * @return List of key exchange vulnerabilities
     */
    QList<Vulnerability> checkWeakKeyExchange(const QString &banner, const QString &serviceName);

    /**
     * @brief Check for weak encryption ciphers
     * @param banner SSH banner
     * @param serviceName Service name and version
     * @return List of cipher vulnerabilities
     */
    QList<Vulnerability> checkWeakCiphers(const QString &banner, const QString &serviceName);

    /**
     * @brief Check for banner disclosure
     * @param banner SSH banner
     * @param serviceName Service name and version
     * @return List of information disclosure vulnerabilities
     */
    QList<Vulnerability> checkBannerDisclosure(const QString &banner, const QString &serviceName);

    /**
     * @brief Extract SSH version from banner (e.g., "SSH-2.0-OpenSSH_7.4")
     * @param banner SSH banner string
     * @return Version string (e.g., "7.4")
     */
    QString extractVersion(const QString &banner) const;

    /**
     * @brief Compare two SSH versions
     * @param version1 First version
     * @param version2 Second version
     * @return -1 if version1 < version2, 0 if equal, 1 if version1 > version2
     */
    int compareVersions(const QString &version1, const QString &version2) const;
};

#endif // SSHVULNCHECKER_H
