#ifndef VULNERABILITYSCANNER_H
#define VULNERABILITYSCANNER_H

#include <QObject>
#include <QThreadPool>
#include <QMutex>
#include <QVector>
#include "VulnerabilityDatabase.h"
#include "VulnerabilityMatcher.h"
#include "../scanner/ScanResult.h"

/**
 * @struct VulnerabilityResult
 * @brief Result of vulnerability assessment for a single service
 */
struct VulnerabilityResult {
    QString host;                    ///< Target host address
    int port;                        ///< Service port number
    QString serviceName;             ///< Detected service name
    QString version;                 ///< Detected service version
    QVector<CveEntry> vulnerabilities; ///< Matching CVE entries
    int vulnerabilityCount;          ///< Total number of vulnerabilities found

    VulnerabilityResult()
        : port(0), vulnerabilityCount(0) {}
};

Q_DECLARE_METATYPE(VulnerabilityResult)

/**
 * @class VulnerabilityScanner
 * @brief Orchestrates parallel vulnerability assessment of detected services
 *
 * Takes scan results from network scanner and performs vulnerability
 * assessment by correlating detected services with CVE database.
 * Uses QThreadPool for parallel processing of multiple services.
 *
 * Features:
 * - Parallel vulnerability assessment
 * - Progress tracking via Qt signals
 * - Thread-safe result aggregation
 * - Integration with ScanResult data
 *
 * Usage:
 * @code
 * VulnerabilityDatabase db("cve.db");
 * VulnerabilityScanner scanner(db);
 *
 * connect(&scanner, &VulnerabilityScanner::progress, [](int current, int total) {
 *     qDebug() << "Progress:" << current << "/" << total;
 * });
 *
 * connect(&scanner, &VulnerabilityScanner::finished, [](const QVector<VulnerabilityResult>& results) {
 *     qDebug() << "Found" << results.size() << "vulnerable services";
 * });
 *
 * scanner.assessVulnerabilities(scanResults);
 * @endcode
 */
class VulnerabilityScanner : public QObject {
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param database Reference to VulnerabilityDatabase
     * @param parent Parent QObject (optional)
     */
    explicit VulnerabilityScanner(VulnerabilityDatabase& database, QObject* parent = nullptr);

    /**
     * @brief Destructor - waits for active scans to complete
     */
    ~VulnerabilityScanner();

    /**
     * @brief Start vulnerability assessment of scan results
     * @param scanResult Result from network scanner
     *
     * Analyzes each detected service in parallel using thread pool.
     * Emits progress() and finished() signals.
     */
    void assessVulnerabilities(const ScanResult& scanResult);

    /**
     * @brief Cancel ongoing vulnerability assessment
     *
     * Attempts to stop active workers (best effort).
     * finished() signal may still be emitted with partial results.
     */
    void cancel();

    /**
     * @brief Check if vulnerability assessment is running
     * @return true if assessment in progress
     */
    bool isScanning() const;

    /**
     * @brief Get current assessment results
     * @return Vector of vulnerability results (may be partial if scanning)
     */
    QVector<VulnerabilityResult> getResults() const;

signals:
    /**
     * @brief Progress update signal
     * @param current Number of services assessed
     * @param total Total number of services to assess
     */
    void progress(int current, int total);

    /**
     * @brief Vulnerability found signal
     * @param result Result for a single service with vulnerabilities
     */
    void vulnerabilityFound(const VulnerabilityResult& result);

    /**
     * @brief Assessment completed signal
     * @param results All vulnerability assessment results
     */
    void finished(const QVector<VulnerabilityResult>& results);

    /**
     * @brief Error occurred during assessment
     * @param error Error description
     */
    void error(const QString& error);

private:
    friend class VulnerabilityWorker;

    /**
     * @brief Thread-safe method to add a result
     * @param result Result from worker thread
     */
    void addResult(const VulnerabilityResult& result);

    /**
     * @brief Thread-safe method to report progress
     */
    void reportProgress();

    /**
     * @brief Called when all workers complete
     */
    void onAssessmentComplete();

    VulnerabilityDatabase& m_database;     ///< Reference to CVE database
    VulnerabilityMatcher m_matcher;        ///< Vulnerability matcher instance
    QThreadPool* m_threadPool;             ///< Thread pool for workers

    mutable QMutex m_mutex;                ///< Mutex for thread-safe access
    QVector<VulnerabilityResult> m_results; ///< Accumulated results
    int m_totalServices;                   ///< Total number of services to assess
    int m_completedServices;               ///< Number of services assessed
    bool m_isScanning;                     ///< Scanning status flag
    bool m_cancelled;                      ///< Cancellation flag
};

#endif // VULNERABILITYSCANNER_H
