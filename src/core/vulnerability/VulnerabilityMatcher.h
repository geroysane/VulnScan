#ifndef VULNERABILITYMATCHER_H
#define VULNERABILITYMATCHER_H

#include <QString>
#include <QVector>
#include "VulnerabilityDatabase.h"
#include "../scanner/ScanResult.h"

/**
 * @class VulnerabilityMatcher
 * @brief Matches detected services with CVE database entries
 *
 * Provides logic for correlating detected services (from port scanning)
 * with known vulnerabilities in the CVE database. Supports semantic
 * versioning, version ranges, and wildcard matching.
 *
 * Features:
 * - Service-to-CVE correlation
 * - Semantic version matching (1.2.3 vs 1.10.0)
 * - Version range matching (2.0-2.5)
 * - Wildcard matching (1.*)
 * - Service name normalization
 *
 * @note This class is stateless and thread-safe
 */
class VulnerabilityMatcher {
public:
    /**
     * @brief Constructor
     * @param database Reference to VulnerabilityDatabase for CVE lookups
     */
    explicit VulnerabilityMatcher(VulnerabilityDatabase& database);

    /**
     * @brief Find vulnerabilities for a detected service
     * @param serviceName Detected service name (e.g., "Apache", "OpenSSH")
     * @param version Detected service version (e.g., "2.4.49")
     * @return Vector of matching CVE entries
     *
     * Performs fuzzy matching on service name and precise version matching.
     * Returns all CVEs that apply to this service/version combination.
     */
    QVector<CveEntry> findVulnerabilities(const QString& serviceName, const QString& version) const;

    /**
     * @brief Find vulnerabilities for a service (any version)
     * @param serviceName Service name to search for
     * @return Vector of all CVE entries for this service
     *
     * Returns all known vulnerabilities for a service, regardless of version.
     * Useful when version detection fails.
     */
    QVector<CveEntry> findVulnerabilitiesForService(const QString& serviceName) const;

    /**
     * @brief Normalize service name for matching
     * @param serviceName Raw service name from detection
     * @return Normalized service name
     *
     * Examples:
     * - "apache httpd" → "Apache"
     * - "openssh-server" → "OpenSSH"
     * - "nginx/1.18.0" → "nginx"
     */
    static QString normalizeServiceName(const QString& serviceName);

    /**
     * @brief Extract version from service banner/string
     * @param banner Service banner or version string
     * @return Extracted version string (empty if not found)
     *
     * Examples:
     * - "Apache/2.4.49 (Unix)" → "2.4.49"
     * - "OpenSSH_7.4" → "7.4"
     * - "nginx/1.18.0" → "1.18.0"
     */
    static QString extractVersion(const QString& banner);

    /**
     * @brief Check if a version matches a pattern
     * @param version Version to check (e.g., "2.4.49")
     * @param pattern Pattern to match (e.g., "2.4.*", "2.0-2.5", "2.4.49")
     * @return true if version matches pattern
     *
     * Supports:
     * - Exact match: "2.4.49"
     * - Range: "2.0-2.5" (inclusive)
     * - Wildcard: "2.4.*" (matches 2.4.0, 2.4.49, etc.)
     */
    static bool matchesVersion(const QString& version, const QString& pattern);

    /**
     * @brief Compare two version strings using semantic versioning
     * @param v1 First version
     * @param v2 Second version
     * @return -1 if v1 < v2, 0 if equal, 1 if v1 > v2
     *
     * Handles semantic versioning correctly (1.10.0 > 1.2.3)
     */
    static int compareVersions(const QString& v1, const QString& v2);

private:
    VulnerabilityDatabase& m_database;  ///< Reference to CVE database
};

#endif // VULNERABILITYMATCHER_H
