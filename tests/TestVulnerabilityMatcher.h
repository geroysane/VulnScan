#ifndef TESTVULNERABILITYMATCHER_H
#define TESTVULNERABILITYMATCHER_H

#include <QObject>
#include <QTest>

/**
 * @class TestVulnerabilityMatcher
 * @brief Unit tests for VulnerabilityMatcher class
 *
 * Tests:
 * - Service name normalization
 * - Version extraction from banners
 * - Version matching (exact, range, wildcard)
 * - Version comparison (semantic versioning)
 * - CVE correlation
 */
class TestVulnerabilityMatcher : public QObject {
    Q_OBJECT

private slots:
    // Setup and cleanup
    void initTestCase();
    void cleanupTestCase();
    void init();
    void cleanup();

    // Service name normalization tests
    void testNormalizeServiceName();
    void testNormalizeApache();
    void testNormalizeNginx();
    void testNormalizeOpenSSH();
    void testNormalizeWithVersion();
    void testNormalizeWithSuffix();

    // Version extraction tests
    void testExtractVersionSlash();
    void testExtractVersionUnderscore();
    void testExtractVersionSpace();
    void testExtractVersionNone();
    void testExtractVersionComplex();

    // Version matching tests
    void testMatchesVersionExact();
    void testMatchesVersionWildcard();
    void testMatchesVersionRange();
    void testMatchesVersionInvalid();

    // Version comparison tests
    void testCompareVersionsEqual();
    void testCompareVersionsLess();
    void testCompareVersionsGreater();
    void testCompareVersionsSemanticVersioning();
    void testCompareVersionsDifferentLength();

    // Integration tests with database
    void testFindVulnerabilitiesWithVersion();
    void testFindVulnerabilitiesWithoutVersion();
    void testFindVulnerabilitiesForService();
    void testFindVulnerabilitiesNoMatch();

private:
    QString m_testDbPath;
};

#endif // TESTVULNERABILITYMATCHER_H
