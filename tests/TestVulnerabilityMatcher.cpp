#include "TestVulnerabilityMatcher.h"
#include "../src/core/vulnerability/VulnerabilityMatcher.h"
#include "../src/core/vulnerability/VulnerabilityDatabase.h"
#include <QFile>
#include <QDir>

void TestVulnerabilityMatcher::initTestCase()
{
    QDir tempDir = QDir::temp();
    m_testDbPath = tempDir.absoluteFilePath("test_vuln_matcher.sqlite");
}

void TestVulnerabilityMatcher::cleanupTestCase()
{
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityMatcher::init()
{
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityMatcher::cleanup()
{
    QFile::remove(m_testDbPath);
}

// Service name normalization tests

void TestVulnerabilityMatcher::testNormalizeServiceName()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("apache"), QString("Apache"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("NGINX"), QString("nginx"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("  mysql  "), QString("MySQL"));
}

void TestVulnerabilityMatcher::testNormalizeApache()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("apache httpd"), QString("Apache"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("Apache"), QString("Apache"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("APACHE HTTPD"), QString("Apache"));
}

void TestVulnerabilityMatcher::testNormalizeNginx()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("nginx"), QString("nginx"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("NGINX"), QString("nginx"));
}

void TestVulnerabilityMatcher::testNormalizeOpenSSH()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("openssh"), QString("OpenSSH"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("ssh"), QString("OpenSSH"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("OpenSSH"), QString("OpenSSH"));
}

void TestVulnerabilityMatcher::testNormalizeWithVersion()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("nginx/1.18.0"), QString("nginx"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("Apache/2.4.49"), QString("Apache"));
}

void TestVulnerabilityMatcher::testNormalizeWithSuffix()
{
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("mysql-server"), QString("MySQL"));
    QCOMPARE(VulnerabilityMatcher::normalizeServiceName("openssh-daemon"), QString("OpenSSH"));
}

// Version extraction tests

void TestVulnerabilityMatcher::testExtractVersionSlash()
{
    QCOMPARE(VulnerabilityMatcher::extractVersion("Apache/2.4.49"), QString("2.4.49"));
    QCOMPARE(VulnerabilityMatcher::extractVersion("nginx/1.18.0"), QString("1.18.0"));
    QCOMPARE(VulnerabilityMatcher::extractVersion("MySQL/8.0.27"), QString("8.0.27"));
}

void TestVulnerabilityMatcher::testExtractVersionUnderscore()
{
    QCOMPARE(VulnerabilityMatcher::extractVersion("OpenSSH_7.4"), QString("7.4"));
    QCOMPARE(VulnerabilityMatcher::extractVersion("vsftpd_3.0.3"), QString("3.0.3"));
}

void TestVulnerabilityMatcher::testExtractVersionSpace()
{
    QCOMPARE(VulnerabilityMatcher::extractVersion("Apache 2.4.49"), QString("2.4.49"));
    QCOMPARE(VulnerabilityMatcher::extractVersion("nginx 1.18.0"), QString("1.18.0"));
}

void TestVulnerabilityMatcher::testExtractVersionNone()
{
    QCOMPARE(VulnerabilityMatcher::extractVersion("Apache"), QString(""));
    QCOMPARE(VulnerabilityMatcher::extractVersion("nginx"), QString(""));
    QCOMPARE(VulnerabilityMatcher::extractVersion(""), QString(""));
}

void TestVulnerabilityMatcher::testExtractVersionComplex()
{
    QCOMPARE(VulnerabilityMatcher::extractVersion("Apache/2.4.49 (Unix)"), QString("2.4.49"));
    QCOMPARE(VulnerabilityMatcher::extractVersion("220 ProFTPD 1.3.5 Server"), QString("1.3.5"));
}

// Version matching tests

void TestVulnerabilityMatcher::testMatchesVersionExact()
{
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.49", "2.4.49"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.4.49", "2.4.50"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.4.49", "2.4.48"));
}

void TestVulnerabilityMatcher::testMatchesVersionWildcard()
{
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.49", "2.4.*"));
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.0", "2.4.*"));
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.100", "2.4.*"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.5.0", "2.4.*"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("3.0.0", "2.*"));
}

void TestVulnerabilityMatcher::testMatchesVersionRange()
{
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.49", "2.4.0-2.4.50"));
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.0", "2.4.0-2.4.50"));
    QVERIFY(VulnerabilityMatcher::matchesVersion("2.4.50", "2.4.0-2.4.50"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.3.99", "2.4.0-2.4.50"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.4.51", "2.4.0-2.4.50"));
}

void TestVulnerabilityMatcher::testMatchesVersionInvalid()
{
    QVERIFY(!VulnerabilityMatcher::matchesVersion("", "2.4.49"));
    QVERIFY(!VulnerabilityMatcher::matchesVersion("2.4.49", ""));
}

// Version comparison tests

void TestVulnerabilityMatcher::testCompareVersionsEqual()
{
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4.49", "2.4.49"), 0);
    QCOMPARE(VulnerabilityMatcher::compareVersions("1.0.0", "1.0.0"), 0);
}

void TestVulnerabilityMatcher::testCompareVersionsLess()
{
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4.48", "2.4.49"), -1);
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.3.0", "2.4.0"), -1);
    QCOMPARE(VulnerabilityMatcher::compareVersions("1.9.9", "2.0.0"), -1);
}

void TestVulnerabilityMatcher::testCompareVersionsGreater()
{
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4.50", "2.4.49"), 1);
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.5.0", "2.4.99"), 1);
    QCOMPARE(VulnerabilityMatcher::compareVersions("3.0.0", "2.9.9"), 1);
}

void TestVulnerabilityMatcher::testCompareVersionsSemanticVersioning()
{
    // Test that 1.10.0 > 1.2.3 (not string comparison)
    QCOMPARE(VulnerabilityMatcher::compareVersions("1.10.0", "1.2.3"), 1);
    QCOMPARE(VulnerabilityMatcher::compareVersions("1.2.3", "1.10.0"), -1);
}

void TestVulnerabilityMatcher::testCompareVersionsDifferentLength()
{
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4", "2.4.0"), 0);
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4.0", "2.4"), 0);
    QCOMPARE(VulnerabilityMatcher::compareVersions("2.4.1", "2.4"), 1);
}

// Integration tests with database

void TestVulnerabilityMatcher::testFindVulnerabilitiesWithVersion()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert test CVE
    CveEntry cve;
    cve.cveId = "CVE-2021-41773";
    cve.description = "Path traversal in Apache HTTP Server";
    cve.severity = "CRITICAL";
    cve.cvssScore = 9.8f;
    cve.affectedService = "Apache";
    cve.affectedVersions = "2.4.49";
    QVERIFY(db.insertCve(cve));

    VulnerabilityMatcher matcher(db);
    QVector<CveEntry> results = matcher.findVulnerabilities("Apache", "2.4.49");

    QCOMPARE(results.size(), 1);
    QCOMPARE(results[0].cveId, QString("CVE-2021-41773"));
}

void TestVulnerabilityMatcher::testFindVulnerabilitiesWithoutVersion()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry cve;
    cve.cveId = "CVE-2021-41773";
    cve.description = "Path traversal";
    cve.severity = "CRITICAL";
    cve.cvssScore = 9.8f;
    cve.affectedService = "Apache";
    cve.affectedVersions = "2.4.49";
    QVERIFY(db.insertCve(cve));

    VulnerabilityMatcher matcher(db);
    QVector<CveEntry> results = matcher.findVulnerabilities("Apache", "");

    QCOMPARE(results.size(), 1);
}

void TestVulnerabilityMatcher::testFindVulnerabilitiesForService()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry cve1;
    cve1.cveId = "CVE-2021-00001";
    cve1.description = "Test 1";
    cve1.severity = "HIGH";
    cve1.cvssScore = 8.0f;
    cve1.affectedService = "nginx";
    cve1.affectedVersions = "1.18.0";
    QVERIFY(db.insertCve(cve1));

    CveEntry cve2;
    cve2.cveId = "CVE-2021-00002";
    cve2.description = "Test 2";
    cve2.severity = "MEDIUM";
    cve2.cvssScore = 6.0f;
    cve2.affectedService = "nginx";
    cve2.affectedVersions = "1.19.0";
    QVERIFY(db.insertCve(cve2));

    VulnerabilityMatcher matcher(db);
    QVector<CveEntry> results = matcher.findVulnerabilitiesForService("nginx");

    QCOMPARE(results.size(), 2);
}

void TestVulnerabilityMatcher::testFindVulnerabilitiesNoMatch()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityMatcher matcher(db);
    QVector<CveEntry> results = matcher.findVulnerabilities("NonExistentService", "1.0.0");

    QCOMPARE(results.size(), 0);
}
