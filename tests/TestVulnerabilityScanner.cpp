#include "TestVulnerabilityScanner.h"
#include "../src/core/vulnerability/VulnerabilityScanner.h"
#include "../src/core/vulnerability/VulnerabilityDatabase.h"
#include <QFile>
#include <QDir>
#include <QEventLoop>
#include <QTimer>

void TestVulnerabilityScanner::initTestCase()
{
    QDir tempDir = QDir::temp();
    m_testDbPath = tempDir.absoluteFilePath("test_vuln_scanner.sqlite");
}

void TestVulnerabilityScanner::cleanupTestCase()
{
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityScanner::init()
{
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityScanner::cleanup()
{
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityScanner::testScannerInitialization()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QVERIFY(!scanner.isScanning());
    QCOMPARE(scanner.getResults().size(), 0);
}

void TestVulnerabilityScanner::testAssessEmptyScanResults()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult emptyScanResult;
    scanner.assessVulnerabilities(emptyScanResult);

    QVERIFY(finishedSpy.wait(1000));
    QCOMPARE(finishedSpy.count(), 1);
}

void TestVulnerabilityScanner::testAssessSingleService()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));
    QCOMPARE(finishedSpy.count(), 1);
}

void TestVulnerabilityScanner::testAssessMultipleServices()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    for (int i = 0; i < 5; i++) {
        PortResult portResult;
        portResult.port = 80 + i;
        portResult.state = "open";
        portResult.service = "TestService";
        portResult.version = "1.0.0";
        scanResult.ports.append(portResult);
    }

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(3000));
    QCOMPARE(finishedSpy.count(), 1);
}

void TestVulnerabilityScanner::testProgressSignal()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy progressSpy(&scanner, &VulnerabilityScanner::progress);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    for (int i = 0; i < 3; i++) {
        PortResult portResult;
        portResult.port = 80 + i;
        portResult.state = "open";
        portResult.service = "TestService";
        portResult.version = "1.0.0";
        scanResult.ports.append(portResult);
    }

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(3000));
    QCOMPARE(progressSpy.count(), 3);
}

void TestVulnerabilityScanner::testFinishedSignal()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));
    QCOMPARE(finishedSpy.count(), 1);

    // Check signal parameters
    QList<QVariant> arguments = finishedSpy.takeFirst();
    QVector<VulnerabilityResult> results = arguments.at(0).value<QVector<VulnerabilityResult>>();
    QCOMPARE(results.size(), 1);
}

void TestVulnerabilityScanner::testVulnerabilityFoundSignal()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert test CVE
    CveEntry cve;
    cve.cveId = "CVE-2021-41773";
    cve.description = "Path traversal";
    cve.severity = "CRITICAL";
    cve.cvssScore = 9.8f;
    cve.affectedService = "Apache";
    cve.affectedVersions = "2.4.49";
    QVERIFY(db.insertCve(cve));

    VulnerabilityScanner scanner(db);
    QSignalSpy vulnFoundSpy(&scanner, &VulnerabilityScanner::vulnerabilityFound);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));
    QCOMPARE(vulnFoundSpy.count(), 1);

    // Check vulnerability details
    QList<QVariant> arguments = vulnFoundSpy.takeFirst();
    VulnerabilityResult vulnResult = arguments.at(0).value<VulnerabilityResult>();
    QCOMPARE(vulnResult.vulnerabilityCount, 1);
    QCOMPARE(vulnResult.vulnerabilities[0].cveId, QString("CVE-2021-41773"));
}

void TestVulnerabilityScanner::testIsScanningState()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QVERIFY(!scanner.isScanning());

    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));
    QVERIFY(!scanner.isScanning());
}

void TestVulnerabilityScanner::testCancelAssessment()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    for (int i = 0; i < 100; i++) {
        PortResult portResult;
        portResult.port = 80 + i;
        portResult.state = "open";
        portResult.service = "TestService";
        portResult.version = "1.0.0";
        scanResult.ports.append(portResult);
    }

    scanner.assessVulnerabilities(scanResult);
    scanner.cancel();

    QVERIFY(finishedSpy.wait(3000));
}

void TestVulnerabilityScanner::testGetResults()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));

    QVector<VulnerabilityResult> results = scanner.getResults();
    QCOMPARE(results.size(), 1);
    QCOMPARE(results[0].host, QString("192.168.1.1"));
    QCOMPARE(results[0].port, 80);
}

void TestVulnerabilityScanner::testAssessWithVulnerabilities()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert test CVEs
    CveEntry cve1;
    cve1.cveId = "CVE-2021-41773";
    cve1.description = "Path traversal";
    cve1.severity = "CRITICAL";
    cve1.cvssScore = 9.8f;
    cve1.affectedService = "Apache";
    cve1.affectedVersions = "2.4.49";
    QVERIFY(db.insertCve(cve1));

    CveEntry cve2;
    cve2.cveId = "CVE-2021-42013";
    cve2.description = "Path traversal (bypass)";
    cve2.severity = "CRITICAL";
    cve2.cvssScore = 9.8f;
    cve2.affectedService = "Apache";
    cve2.affectedVersions = "2.4.49";
    QVERIFY(db.insertCve(cve2));

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "Apache";
    portResult.version = "2.4.49";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));

    QVector<VulnerabilityResult> results = scanner.getResults();
    QCOMPARE(results.size(), 1);
    QCOMPARE(results[0].vulnerabilityCount, 2);
}

void TestVulnerabilityScanner::testAssessWithoutVulnerabilities()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);
    QSignalSpy vulnFoundSpy(&scanner, &VulnerabilityScanner::vulnerabilityFound);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "SafeService";
    portResult.version = "1.0.0";
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));
    QCOMPARE(vulnFoundSpy.count(), 0);

    QVector<VulnerabilityResult> results = scanner.getResults();
    QCOMPARE(results.size(), 1);
    QCOMPARE(results[0].vulnerabilityCount, 0);
}

void TestVulnerabilityScanner::testAssessServicesWithoutVersion()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert test CVE
    CveEntry cve;
    cve.cveId = "CVE-2021-00001";
    cve.description = "Test vulnerability";
    cve.severity = "HIGH";
    cve.cvssScore = 8.0f;
    cve.affectedService = "nginx";
    cve.affectedVersions = "1.18.0";
    QVERIFY(db.insertCve(cve));

    VulnerabilityScanner scanner(db);
    QSignalSpy finishedSpy(&scanner, &VulnerabilityScanner::finished);

    ScanResult scanResult;
    scanResult.targetHost = "192.168.1.1";

    PortResult portResult;
    portResult.port = 80;
    portResult.state = "open";
    portResult.service = "nginx";
    portResult.version = ""; // No version
    scanResult.ports.append(portResult);

    scanner.assessVulnerabilities(scanResult);

    QVERIFY(finishedSpy.wait(2000));

    QVector<VulnerabilityResult> results = scanner.getResults();
    QCOMPARE(results.size(), 1);
    // Should still find CVEs for the service (any version)
    QCOMPARE(results[0].vulnerabilityCount, 1);
}
