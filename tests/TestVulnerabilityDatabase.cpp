#include "TestVulnerabilityDatabase.h"
#include "../src/core/vulnerability/VulnerabilityDatabase.h"
#include <QFile>
#include <QDir>
#include <QThread>
#include <QThreadPool>
#include <QDebug>
#include <QSqlDatabase>
#include <QtConcurrent/QtConcurrent>
#include <cstdio>

void TestVulnerabilityDatabase::initTestCase()
{
    // Use absolute path for database
    QDir tempDir = QDir::temp();
    m_testDbPath = tempDir.absoluteFilePath("test_vuln_db.sqlite");
    fprintf(stderr, "[TestVulnerabilityDatabase] Test database path: %s\n", m_testDbPath.toUtf8().constData());
    fflush(stderr);
}

void TestVulnerabilityDatabase::cleanupTestCase()
{
    // Final cleanup - remove test database file
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityDatabase::init()
{
    // Remove test database file before each test
    // Do NOT remove database connections - let them be reused
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityDatabase::cleanup()
{
    // Clean up test database file after each test
    QFile::remove(m_testDbPath);
}

void TestVulnerabilityDatabase::testInitialization()
{
    VulnerabilityDatabase db(m_testDbPath);
    bool initResult = db.initialize();
    if (!initResult) {
        qDebug() << "Initialization failed with error:" << db.getLastError();
    }
    QVERIFY(initResult);
    QVERIFY(db.isInitialized());
    QVERIFY(db.getLastError().isEmpty());

    // Verify table was created by checking count
    QCOMPARE(db.getCveCount(), 0);
}

void TestVulnerabilityDatabase::testInitializationInvalidPath()
{
    // Test with invalid path (directory doesn't exist)
    VulnerabilityDatabase db("/invalid/path/that/does/not/exist/test.db");
    QVERIFY(!db.initialize());
    QVERIFY(!db.isInitialized());
    QVERIFY(!db.getLastError().isEmpty());
}

void TestVulnerabilityDatabase::testInsertCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Log4Shell - Remote code execution in Log4j";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0-2.14.1";
    entry.publishedDate = "2021-12-10";
    entry.references = "https://nvd.nist.gov/vuln/detail/CVE-2021-44228";
    entry.cweId = "CWE-502";

    QVERIFY(db.insertCve(entry));
    QVERIFY(entry.id > 0); // ID should be assigned
    QCOMPARE(db.getCveCount(), 1);
}

void TestVulnerabilityDatabase::testInsertDuplicateCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Log4Shell";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0-2.14.1";

    QVERIFY(db.insertCve(entry));

    // Try to insert duplicate CVE ID
    CveEntry duplicate = entry;
    duplicate.id = 0; // Reset ID
    QVERIFY(!db.insertCve(duplicate)); // Should fail due to UNIQUE constraint
    QVERIFY(!db.getLastError().isEmpty());
}

void TestVulnerabilityDatabase::testUpdateCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Original description";
    entry.severity = "HIGH";
    entry.cvssScore = 8.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0-2.14.1";

    QVERIFY(db.insertCve(entry));
    int originalId = entry.id;

    // Update the entry
    entry.description = "Updated description";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;

    QVERIFY(db.updateCve(entry));

    // Verify update
    CveEntry retrieved;
    QVERIFY(db.findByCveId("CVE-2021-44228", retrieved));
    QCOMPARE(retrieved.id, originalId);
    QCOMPARE(retrieved.description, QString("Updated description"));
    QCOMPARE(retrieved.severity, QString("CRITICAL"));
    QCOMPARE(retrieved.cvssScore, 10.0f);
}

void TestVulnerabilityDatabase::testUpdateNonExistentCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.id = 9999; // Non-existent ID
    entry.cveId = "CVE-9999-9999";
    entry.description = "Test";
    entry.severity = "LOW";
    entry.cvssScore = 1.0f;
    entry.affectedService = "Test";
    entry.affectedVersions = "1.0";

    QVERIFY(!db.updateCve(entry));
    QVERIFY(!db.getLastError().isEmpty());
}

void TestVulnerabilityDatabase::testDeleteCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Test";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0-2.14.1";

    QVERIFY(db.insertCve(entry));
    QCOMPARE(db.getCveCount(), 1);

    QVERIFY(db.deleteCve(entry.id));
    QCOMPARE(db.getCveCount(), 0);

    // Verify deletion
    CveEntry retrieved;
    QVERIFY(!db.findByCveId("CVE-2021-44228", retrieved));
}

void TestVulnerabilityDatabase::testDeleteNonExistentCve()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    QVERIFY(!db.deleteCve(9999));
    QVERIFY(!db.getLastError().isEmpty());
}

void TestVulnerabilityDatabase::testFindByCveId()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Log4Shell";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0-2.14.1";
    entry.publishedDate = "2021-12-10";
    entry.references = "https://example.com";
    entry.cweId = "CWE-502";

    QVERIFY(db.insertCve(entry));

    CveEntry retrieved;
    QVERIFY(db.findByCveId("CVE-2021-44228", retrieved));
    QCOMPARE(retrieved.cveId, QString("CVE-2021-44228"));
    QCOMPARE(retrieved.description, QString("Log4Shell"));
    QCOMPARE(retrieved.severity, QString("CRITICAL"));
    QCOMPARE(retrieved.cvssScore, 10.0f);
    QCOMPARE(retrieved.affectedService, QString("Apache Log4j"));
    QCOMPARE(retrieved.cweId, QString("CWE-502"));
}

void TestVulnerabilityDatabase::testFindByCveIdNotFound()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry retrieved;
    QVERIFY(!db.findByCveId("CVE-9999-9999", retrieved));
    QVERIFY(!db.getLastError().isEmpty());
}

void TestVulnerabilityDatabase::testFindByService()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert multiple CVEs for the same service
    CveEntry entry1;
    entry1.cveId = "CVE-2021-44228";
    entry1.description = "Log4Shell";
    entry1.severity = "CRITICAL";
    entry1.cvssScore = 10.0f;
    entry1.affectedService = "Apache Log4j";
    entry1.affectedVersions = "2.0-2.14.1";

    CveEntry entry2;
    entry2.cveId = "CVE-2021-45046";
    entry2.description = "Log4j DoS";
    entry2.severity = "HIGH";
    entry2.cvssScore = 9.0f;
    entry2.affectedService = "Apache Log4j";
    entry2.affectedVersions = "2.0-2.16.0";

    QVERIFY(db.insertCve(entry1));
    QVERIFY(db.insertCve(entry2));

    QVector<CveEntry> results = db.findByService("Apache Log4j");
    QCOMPARE(results.size(), 2);

    // Results should be sorted by CVSS score (descending)
    QCOMPARE(results[0].cveId, QString("CVE-2021-44228")); // 10.0
    QCOMPARE(results[1].cveId, QString("CVE-2021-45046")); // 9.0
}

void TestVulnerabilityDatabase::testFindByServiceCaseInsensitive()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-44228";
    entry.description = "Test";
    entry.severity = "CRITICAL";
    entry.cvssScore = 10.0f;
    entry.affectedService = "Apache Log4j";
    entry.affectedVersions = "2.0";

    QVERIFY(db.insertCve(entry));

    // Test case-insensitive search
    QVector<CveEntry> results1 = db.findByService("apache log4j");
    QCOMPARE(results1.size(), 1);

    QVector<CveEntry> results2 = db.findByService("APACHE LOG4J");
    QCOMPARE(results2.size(), 1);
}

void TestVulnerabilityDatabase::testFindByServiceNotFound()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    QVector<CveEntry> results = db.findByService("NonExistentService");
    QVERIFY(results.isEmpty());
}

void TestVulnerabilityDatabase::testGetAllCves()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert multiple CVEs
    for (int i = 0; i < 5; i++) {
        CveEntry entry;
        entry.cveId = QString("CVE-2021-%1").arg(i, 5, 10, QChar('0'));
        entry.description = QString("Test CVE %1").arg(i);
        entry.severity = "MEDIUM";
        entry.cvssScore = 5.0f + i;
        entry.affectedService = "TestService";
        entry.affectedVersions = "1.0";
        QVERIFY(db.insertCve(entry));
    }

    QVector<CveEntry> allCves = db.getAllCves();
    QCOMPARE(allCves.size(), 5);

    // Should be sorted by CVSS score descending
    QVERIFY(allCves[0].cvssScore >= allCves[1].cvssScore);
}

void TestVulnerabilityDatabase::testGetCveCount()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    QCOMPARE(db.getCveCount(), 0);

    CveEntry entry;
    entry.cveId = "CVE-2021-00001";
    entry.description = "Test";
    entry.severity = "LOW";
    entry.cvssScore = 1.0f;
    entry.affectedService = "Test";
    entry.affectedVersions = "1.0";

    QVERIFY(db.insertCve(entry));
    QCOMPARE(db.getCveCount(), 1);

    QVERIFY(db.insertCve(entry)); // Will fail, but let's add another
    entry.cveId = "CVE-2021-00002";
    QVERIFY(db.insertCve(entry));
    QCOMPARE(db.getCveCount(), 2);
}

void TestVulnerabilityDatabase::testClearAllCves()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert multiple CVEs
    for (int i = 0; i < 3; i++) {
        CveEntry entry;
        entry.cveId = QString("CVE-2021-%1").arg(i, 5, 10, QChar('0'));
        entry.description = "Test";
        entry.severity = "LOW";
        entry.cvssScore = 1.0f;
        entry.affectedService = "Test";
        entry.affectedVersions = "1.0";
        QVERIFY(db.insertCve(entry));
    }

    QCOMPARE(db.getCveCount(), 3);
    QVERIFY(db.clearAllCves());
    QCOMPARE(db.getCveCount(), 0);
}

void TestVulnerabilityDatabase::testVersionMatchingExact()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-00001";
    entry.description = "Test exact version";
    entry.severity = "MEDIUM";
    entry.cvssScore = 5.0f;
    entry.affectedService = "TestService";
    entry.affectedVersions = "2.4.1"; // Exact version

    QVERIFY(db.insertCve(entry));

    // Should match exact version
    QVector<CveEntry> results = db.findByServiceAndVersion("TestService", "2.4.1");
    QCOMPARE(results.size(), 1);

    // Should not match different version
    results = db.findByServiceAndVersion("TestService", "2.4.2");
    QCOMPARE(results.size(), 0);
}

void TestVulnerabilityDatabase::testVersionMatchingRange()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-00001";
    entry.description = "Test version range";
    entry.severity = "MEDIUM";
    entry.cvssScore = 5.0f;
    entry.affectedService = "TestService";
    entry.affectedVersions = "2.0-2.5"; // Range

    QVERIFY(db.insertCve(entry));

    // Should match versions in range
    QVector<CveEntry> results1 = db.findByServiceAndVersion("TestService", "2.0");
    QCOMPARE(results1.size(), 1);

    QVector<CveEntry> results2 = db.findByServiceAndVersion("TestService", "2.3");
    QCOMPARE(results2.size(), 1);

    QVector<CveEntry> results3 = db.findByServiceAndVersion("TestService", "2.5");
    QCOMPARE(results3.size(), 1);

    // Should not match versions outside range
    QVector<CveEntry> results4 = db.findByServiceAndVersion("TestService", "1.9");
    QCOMPARE(results4.size(), 0);

    QVector<CveEntry> results5 = db.findByServiceAndVersion("TestService", "2.6");
    QCOMPARE(results5.size(), 0);
}

void TestVulnerabilityDatabase::testVersionMatchingWildcard()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-00001";
    entry.description = "Test wildcard version";
    entry.severity = "MEDIUM";
    entry.cvssScore = 5.0f;
    entry.affectedService = "TestService";
    entry.affectedVersions = "1.*"; // Wildcard

    QVERIFY(db.insertCve(entry));

    // Should match all 1.x versions
    QVector<CveEntry> results1 = db.findByServiceAndVersion("TestService", "1.0");
    QCOMPARE(results1.size(), 1);

    QVector<CveEntry> results2 = db.findByServiceAndVersion("TestService", "1.5.3");
    QCOMPARE(results2.size(), 1);

    QVector<CveEntry> results3 = db.findByServiceAndVersion("TestService", "1.99.99");
    QCOMPARE(results3.size(), 1);

    // Should not match 2.x versions
    QVector<CveEntry> results4 = db.findByServiceAndVersion("TestService", "2.0");
    QCOMPARE(results4.size(), 0);
}

void TestVulnerabilityDatabase::testFindByServiceAndVersion()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert CVEs with different version patterns
    CveEntry entry1;
    entry1.cveId = "CVE-2021-00001";
    entry1.description = "Exact version";
    entry1.severity = "HIGH";
    entry1.cvssScore = 8.0f;
    entry1.affectedService = "Apache";
    entry1.affectedVersions = "2.4.49";

    CveEntry entry2;
    entry2.cveId = "CVE-2021-00002";
    entry2.description = "Version range";
    entry2.severity = "MEDIUM";
    entry2.cvssScore = 6.0f;
    entry2.affectedService = "Apache";
    entry2.affectedVersions = "2.4.0-2.4.50";

    CveEntry entry3;
    entry3.cveId = "CVE-2021-00003";
    entry3.description = "Wildcard";
    entry3.severity = "LOW";
    entry3.cvssScore = 4.0f;
    entry3.affectedService = "Apache";
    entry3.affectedVersions = "2.4.*";

    QVERIFY(db.insertCve(entry1));
    QVERIFY(db.insertCve(entry2));
    QVERIFY(db.insertCve(entry3));

    // Version 2.4.49 should match all three patterns
    QVector<CveEntry> results = db.findByServiceAndVersion("Apache", "2.4.49");
    QCOMPARE(results.size(), 3);
}

void TestVulnerabilityDatabase::testVersionComparisonSemanticVersioning()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    CveEntry entry;
    entry.cveId = "CVE-2021-00001";
    entry.description = "Test semantic versioning";
    entry.severity = "MEDIUM";
    entry.cvssScore = 5.0f;
    entry.affectedService = "TestService";
    entry.affectedVersions = "1.2.3-1.10.5"; // Range with semantic versioning

    QVERIFY(db.insertCve(entry));

    // Test semantic version comparison (1.10.0 > 1.2.3, not 1.1)
    QVector<CveEntry> results1 = db.findByServiceAndVersion("TestService", "1.9.0");
    QCOMPARE(results1.size(), 1); // Should match (1.9.0 is in range)

    QVector<CveEntry> results2 = db.findByServiceAndVersion("TestService", "1.11.0");
    QCOMPARE(results2.size(), 0); // Should not match (1.11.0 > 1.10.5)
}

void TestVulnerabilityDatabase::testConcurrentInsert()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    const int numThreads = 10;
    const int insertsPerThread = 10;

    QVector<QFuture<void>> futures;

    for (int t = 0; t < numThreads; t++) {
        QFuture<void> future = QtConcurrent::run([&db, t, insertsPerThread]() {
            for (int i = 0; i < insertsPerThread; i++) {
                CveEntry entry;
                entry.cveId = QString("CVE-2021-%1-%2").arg(t, 3, 10, QChar('0')).arg(i, 3, 10, QChar('0'));
                entry.description = QString("Thread %1 Insert %2").arg(t).arg(i);
                entry.severity = "MEDIUM";
                entry.cvssScore = 5.0f;
                entry.affectedService = "TestService";
                entry.affectedVersions = "1.0";

                // Insert should be thread-safe
                db.insertCve(entry);
            }
        });
        futures.append(future);
    }

    // Wait for all threads to complete
    for (auto& future : futures) {
        future.waitForFinished();
    }

    // Verify all inserts succeeded
    int expectedCount = numThreads * insertsPerThread;
    QCOMPARE(db.getCveCount(), expectedCount);
}

void TestVulnerabilityDatabase::testConcurrentQuery()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    // Insert test data
    for (int i = 0; i < 50; i++) {
        CveEntry entry;
        entry.cveId = QString("CVE-2021-%1").arg(i, 5, 10, QChar('0'));
        entry.description = QString("Test CVE %1").arg(i);
        entry.severity = "MEDIUM";
        entry.cvssScore = 5.0f;
        entry.affectedService = "TestService";
        entry.affectedVersions = "1.0";
        QVERIFY(db.insertCve(entry));
    }

    const int numThreads = 20;
    QVector<QFuture<void>> futures;

    for (int t = 0; t < numThreads; t++) {
        QFuture<void> future = QtConcurrent::run([&db]() {
            // Perform various queries
            QVector<CveEntry> results = db.findByService("TestService");
            QVERIFY(results.size() > 0);

            int count = db.getCveCount();
            QVERIFY(count > 0);

            QVector<CveEntry> allCves = db.getAllCves();
            QVERIFY(allCves.size() > 0);
        });
        futures.append(future);
    }

    // Wait for all threads to complete
    for (auto& future : futures) {
        future.waitForFinished();
    }
}

void TestVulnerabilityDatabase::testConcurrentMixedOperations()
{
    VulnerabilityDatabase db(m_testDbPath);
    QVERIFY(db.initialize());

    const int numThreads = 10;
    QVector<QFuture<void>> futures;

    for (int t = 0; t < numThreads; t++) {
        QFuture<void> future = QtConcurrent::run([&db, t]() {
            // Mix of insert and query operations
            for (int i = 0; i < 5; i++) {
                CveEntry entry;
                entry.cveId = QString("CVE-2021-%1-%2").arg(t, 3, 10, QChar('0')).arg(i, 3, 10, QChar('0'));
                entry.description = "Test";
                entry.severity = "MEDIUM";
                entry.cvssScore = 5.0f;
                entry.affectedService = "TestService";
                entry.affectedVersions = "1.0";

                db.insertCve(entry);

                // Query after insert
                int count = db.getCveCount();
                QVERIFY(count > 0);
            }
        });
        futures.append(future);
    }

    // Wait for all threads to complete
    for (auto& future : futures) {
        future.waitForFinished();
    }

    // Verify all operations completed
    QVERIFY(db.getCveCount() > 0);
}

void TestVulnerabilityDatabase::testConnectionPooling()
{
    VulnerabilityDatabase db(m_testDbPath, 5); // Max 5 connections
    QVERIFY(db.initialize());

    const int numThreads = 20; // More threads than max connections
    QVector<QFuture<void>> futures;

    for (int t = 0; t < numThreads; t++) {
        QFuture<void> future = QtConcurrent::run([&db, t]() {
            // Each thread should get a connection from the pool
            CveEntry entry;
            entry.cveId = QString("CVE-2021-%1").arg(t, 5, 10, QChar('0'));
            entry.description = "Test pooling";
            entry.severity = "LOW";
            entry.cvssScore = 1.0f;
            entry.affectedService = "TestService";
            entry.affectedVersions = "1.0";

            db.insertCve(entry);
        });
        futures.append(future);
    }

    // Wait for all threads to complete
    for (auto& future : futures) {
        future.waitForFinished();
    }

    // All operations should succeed despite limited connection pool
    QCOMPARE(db.getCveCount(), numThreads);
}
