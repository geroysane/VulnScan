#ifndef TESTVULNERABILITYDATABASE_H
#define TESTVULNERABILITYDATABASE_H

#include <QObject>
#include <QTest>

/**
 * @class TestVulnerabilityDatabase
 * @brief Unit tests for VulnerabilityDatabase class
 *
 * Tests:
 * - Database initialization
 * - CRUD operations (Create, Read, Update, Delete)
 * - Query operations (by CVE ID, service, service+version)
 * - Version matching logic (exact, range, wildcard)
 * - Thread safety with concurrent operations
 * - Connection pooling
 * - Error handling
 */
class TestVulnerabilityDatabase : public QObject {
    Q_OBJECT

private slots:
    // Setup and cleanup
    void initTestCase();
    void cleanupTestCase();
    void init();
    void cleanup();

    // Initialization tests
    void testInitialization();
    void testInitializationInvalidPath();

    // CRUD operation tests
    void testInsertCve();
    void testInsertDuplicateCve();
    void testUpdateCve();
    void testUpdateNonExistentCve();
    void testDeleteCve();
    void testDeleteNonExistentCve();

    // Query operation tests
    void testFindByCveId();
    void testFindByCveIdNotFound();
    void testFindByService();
    void testFindByServiceCaseInsensitive();
    void testFindByServiceNotFound();
    void testGetAllCves();
    void testGetCveCount();
    void testClearAllCves();

    // Version matching tests
    void testVersionMatchingExact();
    void testVersionMatchingRange();
    void testVersionMatchingWildcard();
    void testFindByServiceAndVersion();
    void testVersionComparisonSemanticVersioning();

    // Thread safety tests
    void testConcurrentInsert();
    void testConcurrentQuery();
    void testConcurrentMixedOperations();

    // Connection pooling tests
    void testConnectionPooling();

private:
    QString m_testDbPath;
};

#endif // TESTVULNERABILITYDATABASE_H
